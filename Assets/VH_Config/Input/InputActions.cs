//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/VH_Config/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SmallTown
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3757308f-0fa4-4bef-845b-eaeea93b747b"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""18f4de98-4c44-4b01-af44-a4658fd29498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraControl"",
                    ""type"": ""Button"",
                    ""id"": ""e0df2d6d-724e-4b0b-b029-5418999432c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleJournal"",
                    ""type"": ""Button"",
                    ""id"": ""6e7e2483-20cb-41ac-a0ca-30053e8f7bc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""8394e801-68f7-4a59-a959-2be192381885"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sneaking"",
                    ""type"": ""Button"",
                    ""id"": ""9967c7fe-100f-4c47-b3f0-b262cf610b6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Running"",
                    ""type"": ""Button"",
                    ""id"": ""ed60d76a-c424-4aeb-bc9d-243da75bb3d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMoving"",
                    ""type"": ""Button"",
                    ""id"": ""f3af2421-841f-4607-8712-6f6a2f4b80d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Highlight"",
                    ""type"": ""Button"",
                    ""id"": ""4b81a71c-c33d-4f29-a496-dd8e69f8bbea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MapView"",
                    ""type"": ""Button"",
                    ""id"": ""1ff1e679-d1d6-4382-8f55-8106b672ac8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""a265994d-c1ab-48ed-b33b-670fa52ff8ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""05ecb897-e2d0-457a-bfe0-90cf4dee0dc6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ac6ef739-322f-420e-9519-22a34dccbfff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2a82cb1-265c-4986-b150-0db2d356e03d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold,Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a067c89f-6c05-43c9-9d77-fd2a171644ec"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1b34b04-239a-4dfe-bd45-4df83eff631e"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sneaking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6ffc2ea-f978-423b-9e79-b16c7b09bd41"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17b4ebf9-4baf-4acb-9101-e70459451b0a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMoving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b74f8dce-46de-4add-86c4-fafd013c4c50"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b5b0cfd-b904-4c71-b5ee-78e77fae3dc4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c91b408a-e94f-4896-8773-61d3b0b92133"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Highlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8269e1e8-45a3-4b92-ba3d-4e780bacfebf"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""994bb789-d501-4f16-abeb-08337973d499"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""aebad57e-d9a1-4529-9393-146aa015ad50"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""30a8dd0e-5a43-4956-9cba-bc5bcac25a26"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""13d1fe89-25d7-4e3c-bcc2-a06e567914b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0e35fc78-d688-4156-8bc1-ee9dc954a44a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""58f31afd-5531-4d56-9a77-1f20872ab4cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3fec89a6-d6c8-4e25-8e7b-a30fea41a8e7"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleJournal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""e6859972-4ead-4df1-a0bf-ecbd024866bb"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""462b7905-51a5-49fc-8f57-a79a46ae92ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left Click"",
                    ""type"": ""Button"",
                    ""id"": ""93df2b77-decf-47a8-b263-33acbad4a419"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Click"",
                    ""type"": ""Button"",
                    ""id"": ""82e3cdcf-f52b-48ca-983b-532127c4f950"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll Wheel"",
                    ""type"": ""Value"",
                    ""id"": ""25448eb4-a538-4453-8887-cff79ee10e91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""17af5bbc-78bd-434c-88f7-75067fbfd7fc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""ff725fa0-1e12-477f-8e01-e4d481fec3ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""054d9501-7c4d-4a9b-856a-1deab9282f48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c321ca35-316e-4ac1-bebc-9b818ff26520"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f71831c-b86c-41c7-91e5-98354fe14505"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ed7a841-a057-4e06-b5ef-6224e5c68637"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67537016-8e94-4e87-90c3-f23d00e8690f"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""28173ddb-4560-429d-bdc7-440e0c044d11"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a344a272-b35d-4c41-a9c4-1665a9e26e55"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""74c0b20c-3de3-4ce4-b182-6efea30d1727"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e833da68-7b22-4c1d-8e13-46aeb6e7ba30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c1768bb3-0a14-41a0-b165-291e41a809c6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""f105e6b4-3405-41f4-8889-94416420e587"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f012b3ba-09f4-4c77-a730-73dc35718fb5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b17e7b3-14be-4615-8e0e-bb4fbc7fcac4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f93dd1da-e68c-4c70-99cc-04fe46ad7b78"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aaa32df1-629a-423e-b48b-691656a0fd12"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""155b26fa-59fe-416e-bd20-213b7696ec58"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bec81bc8-286a-49ff-b718-cf172a9033c1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""d61c955b-2d5c-414b-aa80-88ec768e9c3d"",
            ""actions"": [
                {
                    ""name"": ""Control"",
                    ""type"": ""Button"",
                    ""id"": ""fbc7c179-061b-48c0-9320-2f425334ac4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fc2f1d39-1d41-4302-9978-b004918f0561"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeView"",
                    ""type"": ""Value"",
                    ""id"": ""a2b1d289-cdb6-4949-8521-8fe403671b64"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Highlight"",
                    ""type"": ""Button"",
                    ""id"": ""8d083fb5-dc2a-48d8-b451-12e091571912"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e954fd60-2e3a-414d-8019-57e4a65be3ac"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22deabf8-4bb9-45ed-b433-9095187e290a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59a922e8-2901-4f95-97d7-d1160f74e739"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4b152ea-23b8-475d-85f4-fa1a79257964"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Highlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Journal"",
            ""id"": ""1d78fdf2-831e-455c-a32b-2923acd6c2aa"",
            ""actions"": [
                {
                    ""name"": ""ToggleJournal"",
                    ""type"": ""Button"",
                    ""id"": ""da44fb1e-a96d-480c-8b76-19e6b0757b49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b269506f-7943-49fe-ac24-9caa90cf10d5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleJournal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Action = m_Player.FindAction("Action", throwIfNotFound: true);
            m_Player_CameraControl = m_Player.FindAction("CameraControl", throwIfNotFound: true);
            m_Player_ToggleJournal = m_Player.FindAction("ToggleJournal", throwIfNotFound: true);
            m_Player_CameraMovement = m_Player.FindAction("CameraMovement", throwIfNotFound: true);
            m_Player_Sneaking = m_Player.FindAction("Sneaking", throwIfNotFound: true);
            m_Player_Running = m_Player.FindAction("Running", throwIfNotFound: true);
            m_Player_StopMoving = m_Player.FindAction("StopMoving", throwIfNotFound: true);
            m_Player_Highlight = m_Player.FindAction("Highlight", throwIfNotFound: true);
            m_Player_MapView = m_Player.FindAction("MapView", throwIfNotFound: true);
            m_Player_Reload = m_Player.FindAction("Reload", throwIfNotFound: true);
            m_Player_Point = m_Player.FindAction("Point", throwIfNotFound: true);
            m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
            // Menu
            m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
            m_Menu_Point = m_Menu.FindAction("Point", throwIfNotFound: true);
            m_Menu_LeftClick = m_Menu.FindAction("Left Click", throwIfNotFound: true);
            m_Menu_RightClick = m_Menu.FindAction("Right Click", throwIfNotFound: true);
            m_Menu_ScrollWheel = m_Menu.FindAction("Scroll Wheel", throwIfNotFound: true);
            m_Menu_Move = m_Menu.FindAction("Move", throwIfNotFound: true);
            m_Menu_Submit = m_Menu.FindAction("Submit", throwIfNotFound: true);
            m_Menu_Cancel = m_Menu.FindAction("Cancel", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Control = m_Camera.FindAction("Control", throwIfNotFound: true);
            m_Camera_Movement = m_Camera.FindAction("Movement", throwIfNotFound: true);
            m_Camera_ChangeView = m_Camera.FindAction("ChangeView", throwIfNotFound: true);
            m_Camera_Highlight = m_Camera.FindAction("Highlight", throwIfNotFound: true);
            // Journal
            m_Journal = asset.FindActionMap("Journal", throwIfNotFound: true);
            m_Journal_ToggleJournal = m_Journal.FindAction("ToggleJournal", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Action;
        private readonly InputAction m_Player_CameraControl;
        private readonly InputAction m_Player_ToggleJournal;
        private readonly InputAction m_Player_CameraMovement;
        private readonly InputAction m_Player_Sneaking;
        private readonly InputAction m_Player_Running;
        private readonly InputAction m_Player_StopMoving;
        private readonly InputAction m_Player_Highlight;
        private readonly InputAction m_Player_MapView;
        private readonly InputAction m_Player_Reload;
        private readonly InputAction m_Player_Point;
        private readonly InputAction m_Player_Pause;
        public struct PlayerActions
        {
            private @InputActions m_Wrapper;
            public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Action => m_Wrapper.m_Player_Action;
            public InputAction @CameraControl => m_Wrapper.m_Player_CameraControl;
            public InputAction @ToggleJournal => m_Wrapper.m_Player_ToggleJournal;
            public InputAction @CameraMovement => m_Wrapper.m_Player_CameraMovement;
            public InputAction @Sneaking => m_Wrapper.m_Player_Sneaking;
            public InputAction @Running => m_Wrapper.m_Player_Running;
            public InputAction @StopMoving => m_Wrapper.m_Player_StopMoving;
            public InputAction @Highlight => m_Wrapper.m_Player_Highlight;
            public InputAction @MapView => m_Wrapper.m_Player_MapView;
            public InputAction @Reload => m_Wrapper.m_Player_Reload;
            public InputAction @Point => m_Wrapper.m_Player_Point;
            public InputAction @Pause => m_Wrapper.m_Player_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @CameraControl.started += instance.OnCameraControl;
                @CameraControl.performed += instance.OnCameraControl;
                @CameraControl.canceled += instance.OnCameraControl;
                @ToggleJournal.started += instance.OnToggleJournal;
                @ToggleJournal.performed += instance.OnToggleJournal;
                @ToggleJournal.canceled += instance.OnToggleJournal;
                @CameraMovement.started += instance.OnCameraMovement;
                @CameraMovement.performed += instance.OnCameraMovement;
                @CameraMovement.canceled += instance.OnCameraMovement;
                @Sneaking.started += instance.OnSneaking;
                @Sneaking.performed += instance.OnSneaking;
                @Sneaking.canceled += instance.OnSneaking;
                @Running.started += instance.OnRunning;
                @Running.performed += instance.OnRunning;
                @Running.canceled += instance.OnRunning;
                @StopMoving.started += instance.OnStopMoving;
                @StopMoving.performed += instance.OnStopMoving;
                @StopMoving.canceled += instance.OnStopMoving;
                @Highlight.started += instance.OnHighlight;
                @Highlight.performed += instance.OnHighlight;
                @Highlight.canceled += instance.OnHighlight;
                @MapView.started += instance.OnMapView;
                @MapView.performed += instance.OnMapView;
                @MapView.canceled += instance.OnMapView;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Action.started -= instance.OnAction;
                @Action.performed -= instance.OnAction;
                @Action.canceled -= instance.OnAction;
                @CameraControl.started -= instance.OnCameraControl;
                @CameraControl.performed -= instance.OnCameraControl;
                @CameraControl.canceled -= instance.OnCameraControl;
                @ToggleJournal.started -= instance.OnToggleJournal;
                @ToggleJournal.performed -= instance.OnToggleJournal;
                @ToggleJournal.canceled -= instance.OnToggleJournal;
                @CameraMovement.started -= instance.OnCameraMovement;
                @CameraMovement.performed -= instance.OnCameraMovement;
                @CameraMovement.canceled -= instance.OnCameraMovement;
                @Sneaking.started -= instance.OnSneaking;
                @Sneaking.performed -= instance.OnSneaking;
                @Sneaking.canceled -= instance.OnSneaking;
                @Running.started -= instance.OnRunning;
                @Running.performed -= instance.OnRunning;
                @Running.canceled -= instance.OnRunning;
                @StopMoving.started -= instance.OnStopMoving;
                @StopMoving.performed -= instance.OnStopMoving;
                @StopMoving.canceled -= instance.OnStopMoving;
                @Highlight.started -= instance.OnHighlight;
                @Highlight.performed -= instance.OnHighlight;
                @Highlight.canceled -= instance.OnHighlight;
                @MapView.started -= instance.OnMapView;
                @MapView.performed -= instance.OnMapView;
                @MapView.canceled -= instance.OnMapView;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Menu
        private readonly InputActionMap m_Menu;
        private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
        private readonly InputAction m_Menu_Point;
        private readonly InputAction m_Menu_LeftClick;
        private readonly InputAction m_Menu_RightClick;
        private readonly InputAction m_Menu_ScrollWheel;
        private readonly InputAction m_Menu_Move;
        private readonly InputAction m_Menu_Submit;
        private readonly InputAction m_Menu_Cancel;
        public struct MenuActions
        {
            private @InputActions m_Wrapper;
            public MenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Point => m_Wrapper.m_Menu_Point;
            public InputAction @LeftClick => m_Wrapper.m_Menu_LeftClick;
            public InputAction @RightClick => m_Wrapper.m_Menu_RightClick;
            public InputAction @ScrollWheel => m_Wrapper.m_Menu_ScrollWheel;
            public InputAction @Move => m_Wrapper.m_Menu_Move;
            public InputAction @Submit => m_Wrapper.m_Menu_Submit;
            public InputAction @Cancel => m_Wrapper.m_Menu_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void AddCallbacks(IMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }

            private void UnregisterCallbacks(IMenuActions instance)
            {
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @LeftClick.started -= instance.OnLeftClick;
                @LeftClick.performed -= instance.OnLeftClick;
                @LeftClick.canceled -= instance.OnLeftClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @ScrollWheel.started -= instance.OnScrollWheel;
                @ScrollWheel.performed -= instance.OnScrollWheel;
                @ScrollWheel.canceled -= instance.OnScrollWheel;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
            }

            public void RemoveCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MenuActions @Menu => new MenuActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
        private readonly InputAction m_Camera_Control;
        private readonly InputAction m_Camera_Movement;
        private readonly InputAction m_Camera_ChangeView;
        private readonly InputAction m_Camera_Highlight;
        public struct CameraActions
        {
            private @InputActions m_Wrapper;
            public CameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Control => m_Wrapper.m_Camera_Control;
            public InputAction @Movement => m_Wrapper.m_Camera_Movement;
            public InputAction @ChangeView => m_Wrapper.m_Camera_ChangeView;
            public InputAction @Highlight => m_Wrapper.m_Camera_Highlight;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void AddCallbacks(ICameraActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
                @Control.started += instance.OnControl;
                @Control.performed += instance.OnControl;
                @Control.canceled += instance.OnControl;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ChangeView.started += instance.OnChangeView;
                @ChangeView.performed += instance.OnChangeView;
                @ChangeView.canceled += instance.OnChangeView;
                @Highlight.started += instance.OnHighlight;
                @Highlight.performed += instance.OnHighlight;
                @Highlight.canceled += instance.OnHighlight;
            }

            private void UnregisterCallbacks(ICameraActions instance)
            {
                @Control.started -= instance.OnControl;
                @Control.performed -= instance.OnControl;
                @Control.canceled -= instance.OnControl;
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @ChangeView.started -= instance.OnChangeView;
                @ChangeView.performed -= instance.OnChangeView;
                @ChangeView.canceled -= instance.OnChangeView;
                @Highlight.started -= instance.OnHighlight;
                @Highlight.performed -= instance.OnHighlight;
                @Highlight.canceled -= instance.OnHighlight;
            }

            public void RemoveCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // Journal
        private readonly InputActionMap m_Journal;
        private List<IJournalActions> m_JournalActionsCallbackInterfaces = new List<IJournalActions>();
        private readonly InputAction m_Journal_ToggleJournal;
        public struct JournalActions
        {
            private @InputActions m_Wrapper;
            public JournalActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleJournal => m_Wrapper.m_Journal_ToggleJournal;
            public InputActionMap Get() { return m_Wrapper.m_Journal; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(JournalActions set) { return set.Get(); }
            public void AddCallbacks(IJournalActions instance)
            {
                if (instance == null || m_Wrapper.m_JournalActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_JournalActionsCallbackInterfaces.Add(instance);
                @ToggleJournal.started += instance.OnToggleJournal;
                @ToggleJournal.performed += instance.OnToggleJournal;
                @ToggleJournal.canceled += instance.OnToggleJournal;
            }

            private void UnregisterCallbacks(IJournalActions instance)
            {
                @ToggleJournal.started -= instance.OnToggleJournal;
                @ToggleJournal.performed -= instance.OnToggleJournal;
                @ToggleJournal.canceled -= instance.OnToggleJournal;
            }

            public void RemoveCallbacks(IJournalActions instance)
            {
                if (m_Wrapper.m_JournalActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IJournalActions instance)
            {
                foreach (var item in m_Wrapper.m_JournalActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_JournalActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public JournalActions @Journal => new JournalActions(this);
        public interface IPlayerActions
        {
            void OnAction(InputAction.CallbackContext context);
            void OnCameraControl(InputAction.CallbackContext context);
            void OnToggleJournal(InputAction.CallbackContext context);
            void OnCameraMovement(InputAction.CallbackContext context);
            void OnSneaking(InputAction.CallbackContext context);
            void OnRunning(InputAction.CallbackContext context);
            void OnStopMoving(InputAction.CallbackContext context);
            void OnHighlight(InputAction.CallbackContext context);
            void OnMapView(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IMenuActions
        {
            void OnPoint(InputAction.CallbackContext context);
            void OnLeftClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnScrollWheel(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnControl(InputAction.CallbackContext context);
            void OnMovement(InputAction.CallbackContext context);
            void OnChangeView(InputAction.CallbackContext context);
            void OnHighlight(InputAction.CallbackContext context);
        }
        public interface IJournalActions
        {
            void OnToggleJournal(InputAction.CallbackContext context);
        }
    }
}
